# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
splitFirstNames(namesVar[7][[1]])
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 1) {namesVec[3] <- testVec}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 1) {namesVec[3] <- testVec}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 1) {namesVec[3] <- ""}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 1) {namesVec[3] <- ""}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 2) {namesVec[3] <- ""}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesDF <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
View(namesDF)
View(namesDF)
namesDF <- apply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
namesDF <- mapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
namesDF <- lapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
namesLst <- lapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
namesDF <- data.frame(matrix(unlist(namesLst)))
View(namesDF)
namesDF <- data.frame(matrix(namesLst))
View(namesDF)
namesDF <- data.frame(matrix(unlist(namesLst), byrow = TRUE))
View(namesDF)
unlist(namesLst), byrow = TRUE)
namesDF <- data.frame(matrix(unlist(namesLst, byrow = TRUE)))
matrix(unlist(namesLst), byrow = TRUE)
matrix(unlist(namesLst), byrow = FALSE)
namesDF <- data.frame(matrix(unlist(namesLst), byrow = FALSE))
View(namesDF)
namesDF <- data.frame(matrix(namesLst))
View(namesDF)
namesDF <- data.frame(namesLst)
View(namesDF)
namesDF <- as.data.frame(namesLst)
View(namesDF)
namesDF <- as.data.frame(unlist(namesLst, recursive = FALSE))
View(namesDF)
namesDF <- as.data.frame(unlist(namesLst, recursive = TRUE))
View(namesDF)
namesLst
unlist(namesLst)
unlist(unlist(namesLst))
as.data.frame(namesLst)
namesLst <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]))
View(namesLst)
namesLst <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]), simplify = FALSE)
matrix(namesLst))
matrix(namesLst)
matrix(unlist(namesLst))
Achter <- namesList[1:7][[1]]
Achter <- namesLst[1:7][[1]]
Achter <- namesLst[1][[1]]
namesLst[1][[1]]
namesLst[1][[1]][1]
Achter <- namesLst[1:7][[1]][1]
namesDF <- data.frame(namesLst[1:7][[1]][1], namesLst[1:7][[1]][2], namesLst[1:7][[1]][1])
View(namesDF)
namesLst[1:7][[1]][1]
namesLst[1:7]
namesLst[1:7][[1]]
do.call(rbind, lapply(namesLst, data.frame, stringsAsFactors=FALSE))
namesLst[1:7][[1]]
namesLst[1:7]
namesLst[1:7][[1:7]]
namesLst[1:7][1:7]
namesLst[1:7][1:7][1]
namesLst[1:7][1]
namesLst[7][1]
do.call(rbind, lapply(1:7, namesLst[x][1], data.frame, stringsAsFactors=FALSE))
do.call(rbind, lapply(1:7, function(x) namesLst[x][1], data.frame, stringsAsFactors=FALSE))
lapply(1:7, function(x) namesLst[x][1], data.frame, stringsAsFactors=FALSE))
lapply(1:7, function(x) namesLst[x][1], data.frame, stringsAsFactors=FALSE)
namesLst <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]), simplify = FALSE)
str(namesLst)
namesLst[7][1]
namesLst[7][1][2]
namesLst[7][1]
str(namesLst[7])
str(namesLst[7][1])
str(namesLst[7][[1]])
str(namesLst[7][[1]][1])
lapply(1:7, function(x) namesLst[x][[1]], data.frame, stringsAsFactors=FALSE)
namesDF <-  do.call(rbind, lapply(namesLst[1:7][[1]], data.frame, stringsAsFactors=FALSE))
View(namesDF)
namesDF <-  do.call(rbind, lapply(namesLst[c(1:7)][[1]], data.frame, stringsAsFactors=FALSE))
View(namesDF)
namesLst[c(1:7)][[1]]
Achter <- sapply(1:7, function(x) namesLst[x][[1]][1])
namesLst <- sapply(1:7, function(x) splitFirstNames(namesVar[x][[1]]), simplify = FALSE)
Achter <- sapply(1:7, function(x) namesLst[x][[1]][1])
Voor <- sapply(1:7, function(x) namesLst[x][[1]][2])
Tussen <- sapply(1:7, function(x) namesLst[x][[1]][3])
namesDF <- data.frame(c(Achter, Voor, Tussen))
View(namesDF)
namesDF <- data.frame(Achter = Achter, Voor = Voor, Tussen = Tussen)
View(namesDF)
namesDF <- data.frame(Achter, Voor, Tussen)
View(namesDF)
View(internRaw)
l <- length(internRaw[1])
internRaw[1]
l
internRaw[,1]
l <- length(internRaw[,1])
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
l <- length(internRaw[,1])
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 2) {namesVec[3] <- ""}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesLst <- sapply(1:l, function(x) splitFirstNames(namesVar[x][[1]]), simplify = FALSE)
Achter <- sapply(1:l, function(x) namesLst[x][[1]][1])
Voor <- sapply(1:l, function(x) namesLst[x][[1]][2])
Tussen <- sapply(1:l, function(x) namesLst[x][[1]][3])
namesDF <- data.frame(Achter, Voor, Tussen)
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
l <- length(internRaw[,1])
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 2) {namesVec[3] <- ""}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesLst <- sapply(1:l, function(x) splitFirstNames(namesVar[x][[1]]), simplify = FALSE)
Achter <- sapply(1:l, function(x) namesLst[x][[1]][1])
Voor <- sapply(1:l, function(x) namesLst[x][[1]][2])
Tussen <- sapply(1:l, function(x) namesLst[x][[1]][3])
namesDF <- data.frame(Achter, Voor, Tussen)
View(namesDF)
namesDF <- data.frame(Achter, Voor, Tussen, Instelling = rep("HAN", l), Opleiding = internRaw$V5)
View(namesDF)
library("gsheet")
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
l <- length(internRaw[,1])
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 2) {namesVec[3] <- ""}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesLst <- sapply(1:l, function(x) splitFirstNames(namesVar[x][[1]]), simplify = FALSE)
Achter <- sapply(1:l, function(x) namesLst[x][[1]][1])
Voor <- sapply(1:l, function(x) namesLst[x][[1]][2])
Tussen <- sapply(1:l, function(x) namesLst[x][[1]][3])
namesDF <- data.frame(Achter, Voor, Tussen, Instelling = rep("HAN", l), Opleiding = internRaw$V5, Status =rep("Ingeschreven", l))
externRaw <- read.csv(text=gsheet2text(url2, format='csv'), stringsAsFactors=FALSE, header = FALSE)
externRaw <- read.csv(text=gsheet2text(url2, format='csv'), stringsAsFactors=FALSE, header = TRUE)
library(dplyr)
externRaw <- select(externRaw, Achternaam, Voornaam, Tussenvoegsel, Thuisinstelling, Studierichting, Status)
totalDF <- rbind(namesDF, externRaw)
matrix(externRaw)
as.matrix(externRaw)
totalDF <- rbind(namesDF, as.matrix(externRaw))
externRaw <- select(externRaw, Achter = Achternaam, Voor = Voornaam, Tussen = Tussenvoegsel, Instelling = Thuisinstelling, Opleiding = Studierichting, Status)
totalDF <- rbind(namesDF, externRaw)
View(totalDF)
externRaw <- filter(externRaw, grepl("Geannuleerd", Status))
externRaw <- read.csv(text=gsheet2text(url2, format='csv'), stringsAsFactors=FALSE, header = TRUE)
externRaw <- select(externRaw, Achter = Achternaam, Voor = Voornaam, Tussen = Tussenvoegsel, Instelling = Thuisinstelling, Opleiding = Studierichting, Status)
externRaw <- filter(externRaw, !grepl("Geannuleerd", Status))
totalDF <- rbind(namesDF, externRaw)
View(totalDF)
library(gsheet)
library(dplyr)
url1 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=0&single=true&output=csv"
url2 <- "https://docs.google.com/spreadsheets/d/1X8LUX6lxvnnCjv5J2NGy62RA3pVisdtn26QiSXGVnJE/pub?gid=376877257&single=true&output=csv"
internRaw <- read.csv(text=gsheet2text(url1, format='csv'), stringsAsFactors=FALSE, header = FALSE)
l <- length(internRaw[,1])
namesVar <- strsplit(internRaw$V2, ",")
splitFirstNames <- function(vector) {
namesVec <- vector
# Verwijder initialen
namesVec[2] <- gsub("\\(\\w*\\)", "", namesVec[2], ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
# Kopieer het element dat de voornaam bevat
# Bewaar voor één element alles wat geen tussenvoegsel is
tussenVec <- "van|de|der"
testVec <- unlist(strsplit(namesVec[2], " "))
if(length(testVec) == 2) {namesVec[3] <- ""}
else {
namesVec[3] <- grep(tussenVec, testVec , ignore.case = FALSE, perl = FALSE, value = TRUE, fixed = FALSE, useBytes = FALSE, invert = FALSE)
namesVec[3] <- paste(namesVec[3])
}
# Verwijder bij één element alles wat een tussenvoegsel is
namesVec[2] <- testVec[2][1]
# Geef output terug
return(namesVec)
}
namesLst <- sapply(1:l, function(x) splitFirstNames(namesVar[x][[1]]), simplify = FALSE)
Achter <- sapply(1:l, function(x) namesLst[x][[1]][1])
Voor <- sapply(1:l, function(x) namesLst[x][[1]][2])
Tussen <- sapply(1:l, function(x) namesLst[x][[1]][3])
namesDF <- data.frame(Achter, Voor, Tussen, Instelling = rep("HAN", l), Opleiding = internRaw$V5, Status =rep("Student ingeschreven", l))
externRaw <- read.csv(text=gsheet2text(url2, format='csv'), stringsAsFactors=FALSE, header = TRUE)
externRaw <- select(externRaw, Achter = Achternaam, Voor = Voornaam, Tussen = Tussenvoegsel, Instelling = Thuisinstelling, Opleiding = Studierichting, Status)
externRaw <- filter(externRaw, !grepl("Geannuleerd", Status))
totalDF <- rbind(namesDF, externRaw)
View(totalDF)
setwd("~/Google Drive/MERIT/Smart Ind/Werkdocumenten")
write.csv(totalDF, "Inschrijvingen.csv")
write.csv(totalDF, "Inschrijvingen.csv", row.names = TRUE)
library(simmer)
env <- simmer("SuperDuperSim")
env
patient <- create_trajectory("patients' path") %>%
## add an intake activity
seize("nurse", 1) %>%
timeout(function() rnorm(1, 15)) %>%
release("nurse", 1) %>%
## add a consultation activity
seize("doctor", 1) %>%
timeout(function() rnorm(1, 20)) %>%
release("doctor", 1) %>%
## add a planning activity
seize("administration", 1) %>%
timeout(function() rnorm(1, 5)) %>%
release("administration", 1)
env %>%
add_resource("nurse", 1, 5) %>%
add_resource("doctor", 2, 0) %>%
add_resource("administration", 1) %>%
add_generator("patient", patient, function() rnorm(1, 10, 2))
env %>% run(until=720) # 12 uur x 60 minuten
env %>% now()
env %>% peek(3)
dfArr <- env %>% get_mon_arrivals()
dfRes <- env %>% get_mon_resources()
plot_resource_utilization(env, c("nurse", "doctor","administration"))
plot_resource_usage(env, "doctor", items="server", steps=T)
mean(dfArr$finished)
View(dfArr)
View(dfRes)
library(simmer)
env <- simmer("SuperDuperSim")
env
patient <- create_trajectory("patients' path") %>%
## add an intake activity
seize("nurse", 1) %>%
timeout(function() rnorm(1, 15)) %>%
release("nurse", 1) %>%
## add a consultation activity
seize("doctor", 1) %>%
timeout(function() rnorm(1, 20)) %>%
release("doctor", 1) %>%
## add a planning activity
seize("administration", 1) %>%
timeout(function() rnorm(1, 5)) %>%
release("administration", 1)
env %>%
add_resource("nurse", 1, 5) %>%
add_resource("doctor", 2, 0) %>%
add_resource("administration", 1) %>%
add_generator("patient", patient, function() rnorm(1, 10, 2))
env %>% run(until=720) # 12 uur x 60 minuten
env %>% now()
env %>% peek(3)
dfArr <- env %>% get_mon_arrivals()
dfRes <- env %>% get_mon_resources()
plot_resource_utilization(env, c("nurse", "doctor","administration"))
plot_resource_usage(env, "doctor", items="server", steps=T)
mean(dfArr$finished)
View(dfArr)
library(simmer)
env <- simmer("SuperDuperSim")
env
patient <- create_trajectory("patients' path") %>%
## add an intake activity
seize("nurse", 1) %>%
timeout(function() rnorm(1, 15)) %>%
release("nurse", 1) %>%
## add a consultation activity
seize("doctor", 1) %>%
timeout(function() rnorm(1, 20)) %>%
release("doctor", 1) %>%
## add a planning activity
seize("administration", 1) %>%
timeout(function() rnorm(1, 5)) %>%
release("administration", 1)
env %>%
add_resource("nurse", 1, 5) %>%
add_resource("doctor", 2, 0) %>%
add_resource("administration", 1) %>%
add_generator("patient", patient, function() rnorm(1, 10, 2))
env %>% run(until=720) # 12 uur x 60 minuten
env %>% now()
env %>% peek(3)
dfArr <- env %>% get_mon_arrivals()
dfRes <- env %>% get_mon_resources()
plot_resource_utilization(env, c("nurse", "doctor","administration"))
plot_resource_usage(env, "doctor", items="server", steps=T)
mean(dfArr$finished)
View(dfArr)
myData <- read.csv("https://eu1.loriot.io/1/data/pMCi1KAgTkR4zBqENpZmwQ/BE7A0747.csv")
View(myData)
myData <- read.csv("https://eu1.loriot.io/1/data/pMCi1KAgTkR4zBqENpZmwQ/BE7A0747.csv")
View(myData)
myData <- read.csv("https://eu1.loriot.io/1/data/pMCi1KAgTkR4zBqENpZmwQ/BE7A0747.csv")
View(myData)
myData$X1479845535259 <- as.POSIXct(myData$X1479845535259/1000, origin="1970-01-01")
install.packages("tesseract")
install.packages("tesseract", repos = "http://cran.us.r-project.org")
