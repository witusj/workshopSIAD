runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- as.POSIXct(newDF$Tijd, format = "%H:%M:%S")
#newDF$Tijd <- as.Date(newDF$Tijd, format = "%Y-%M-%D %H:%M:%S")
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
install.packages("ggiraph")
library(ggiraph)
geom_point_interactive(aes(tooltip = Uur) +
geom_point_interactive(aes(tooltip = Uur)) +
# Laad de benodigde package(s)
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(ggiraph)
library(rCharts)
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- rawToChar(as.raw(strtoi(s[29:33], 16L)))
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
#newDF$Tijd <- as.Date(newDF$Tijd, format = "%Y-%M-%D %H:%M:%S")
# Plot de data
p <- ggplot(newDF, aes(Tijd, Temp))
p + geom_point(color="red") +
scale_x_datetime(labels = date_format ("%Y-%m-%d %H:%M:%S")) +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=8)) +
geom_point_interactive(aes(tooltip = Uur)) +
geom_smooth(color="black")
# Laad de benodigde package(s)
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(ggiraph)
library(rCharts)
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- rawToChar(as.raw(strtoi(s[29:33], 16L)))
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
#newDF$Tijd <- as.Date(newDF$Tijd, format = "%Y-%M-%D %H:%M:%S")
# Plot de data
p <- ggplot(newDF, aes(Tijd, Temp))
p + geom_point(color="red") +
scale_x_datetime(labels = date_format ("%Y-%m-%d %H:%M:%S")) +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=8)) +
geom_point_interactive(aes(tooltip = Min)) +
geom_smooth(color="black")
# dat <- data.frame(Tijd = newDF$Tijd, Temp = newDF$Temp, stringsAsFactors = FALSE)
# r1 <- hPlot(Temp ~ Tijd, data = dat, type = "scatter")
# r1$tooltip(formatter = "#! function() { return this.x + ', ' + this.y; } !#")
# r1$print("chart1")
# r1
# Laad de benodigde package(s)
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(ggiraph)
library(rCharts)
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- rawToChar(as.raw(strtoi(s[29:33], 16L)))
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
#newDF$Tijd <- as.Date(newDF$Tijd, format = "%Y-%M-%D %H:%M:%S")
# Plot de data
p <- ggplot(newDF, aes(Tijd, Temp))
p + geom_point(color="red") +
scale_x_datetime(labels = date_format ("%Y-%m-%d %H:%M:%S")) +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=8)) +
geom_point_interactive(aes(tooltip = Min)) +
geom_smooth(color="black") + theme_minimal()
# dat <- data.frame(Tijd = newDF$Tijd, Temp = newDF$Temp, stringsAsFactors = FALSE)
# r1 <- hPlot(Temp ~ Tijd, data = dat, type = "scatter")
# r1$tooltip(formatter = "#! function() { return this.x + ', ' + this.y; } !#")
# r1$print("chart1")
# r1
# Laad de benodigde package(s)
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(ggiraph)
library(rCharts)
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- rawToChar(as.raw(strtoi(s[29:33], 16L)))
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
#newDF$Tijd <- as.Date(newDF$Tijd, format = "%Y-%M-%D %H:%M:%S")
# Plot de data
p <- ggplot(newDF, aes(Tijd, Temp))
p + geom_point(color="red") +
scale_x_datetime(labels = date_format ("%Y-%m-%d %H:%M:%S")) +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=8)) +
geom_point_interactive(aes(tooltip = Min)) +
geom_smooth(color="black") + theme_minimal()
ggiraph(code = print(p), width = .7)
# dat <- data.frame(Tijd = newDF$Tijd, Temp = newDF$Temp, stringsAsFactors = FALSE)
# r1 <- hPlot(Temp ~ Tijd, data = dat, type = "scatter")
# r1$tooltip(formatter = "#! function() { return this.x + ', ' + this.y; } !#")
# r1$print("chart1")
# r1
ggiraph(code = print(p), width = .7)
gg <- ggiraph(code = print(p), width = .7)
gg
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
print(source('test.R')$value)
install.packages("maptools")
print(source('test.R')$value)
install.packages("rgeos")
print(source('test.R')$value)
install.packages("rgdal")
print(source('test.R')$value)
install.packages("broom")
print(source('test.R')$value)
install.packages("ggthemes")
print(source('test.R')$value)
install.packages("gpclib", type = "source") #was necessary
print(source('test.R')$value)
print(source('test.R')$value)
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
shiny::runApp(appDir = system.file("shiny/crimes", package = "ggiraph"), display.mode = "showcase")
shiny::runApp(appDir = system.file("shiny/cars", package = "ggiraph"), display.mode = "showcase")
# Laad de benodigde package(s)
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(ggiraph)
library(rCharts)
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- rawToChar(as.raw(strtoi(s[29:33], 16L)))
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
#newDF$Tijd <- as.Date(newDF$Tijd, format = "%Y-%M-%D %H:%M:%S")
# Plot de data
p <- ggplot(newDF, aes(Tijd, Temp))
p + geom_point(color="red") +
scale_x_datetime(labels = date_format ("%Y-%m-%d %H:%M:%S")) +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=8)) +
geom_point_interactive(aes(tooltip = Min)) +
geom_smooth(color="black") + theme_minimal()
ggiraph(code = print(p), width = .7)
# Plot de data
p <- ggplot(newDF, aes(Tijd, Temp)) +
geom_point(color="red") +
scale_x_datetime(labels = date_format ("%Y-%m-%d %H:%M:%S")) +
theme(axis.text.x  = element_text(angle=45, vjust=0.5, size=8)) +
geom_point_interactive(aes(tooltip = Min)) +
geom_smooth(color="black") + theme_minimal()
ggiraph(code = print(p), width = .7)
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
install.packages("plotly")
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- rawToChar(as.raw(strtoi(s[29:33], 16L)))
Temp2[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Temp2 <- as.numeric(Temp2)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
# Laad de benodigde package(s)
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(ggiraph)
library(rCharts)
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
Temp2 <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- rawToChar(as.raw(strtoi(s[29:33], 16L)))
Temp2[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
newDF$Temp2 <- as.numeric(Temp2)
newDF$Tijd <- as.POSIXct(newDF$Tijd)
newDF$Min <- format(newDF$Tijd,"%H:%M:%S")
#newDF$Tijd <- as.Date(newDF$Tijd, format = "%Y-%M-%D %H:%M:%S")
# Laad de benodigde package(s)
library(rvest)
library(dplyr)
library(stringr)
library(ggplot2)
library(scales)
library(ggiraph)
library(rCharts)
# Lees ruwe html data in.
htmlpage <- read_html("http://iot.semtech.com/applications/00-00-00-00-00-00-00-00/data/mote.00-00-00-00-00-00-AA-F4/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
newDF <- tables[1][[1]]
names(newDF)[2] <- "Tijd"
# Converteer hex naar tekst en bewaar data in data frame
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$`Application Data`))) {
s <- unlist(strsplit(newDF$`Application Data`[[i]], " ")) # Splits the tekst in substrings van twee letters 2
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp()
runApp()
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
library(gsheet)
sensorMeta <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1phjlJ4PGZR92Ek-COQLhEYugFOe5zjU1AoQ3lu6l83Y/edit?usp=sharing")
sensorMeta <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1phjlJ4PGZR92Ek-COQLhEYugFOe5zjU1AoQ3lu6l83Y/edit?usp=sharing")
sensorMeta <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1phjlJ4PGZR92Ek-COQLhEYugFOe5zjU1AoQ3lu6l83Y/edit?usp=sharing")
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
sum(seq(1,9))
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
runApp('~/Google Drive/Data Analysis/LORA/SmartParks')
g <- 5
x <- 16
while(abs(g^2 - 16) > 0.000001)
g <- (g + x/g)/2
g
g <- 5
x <- 16
while(abs(g^2 - 16) > 0.000001)
print(g)
g <- 5
x <- 16
while(abs(g^2 - 16) > 0.000001)
g <- (g + x/g)/2
g
g <- 5
x <- 16
while(abs(g^2 - 16) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
g <- 3
x <- 16
while(abs(g^2 - 16) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
g <- 3
x <- 25
while(abs(g^2 - 16) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g <- 3
x <- 25
while(abs(g^2 - x) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
g <- 2
x <- 25
while(abs(g^2 - x) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
g <- 81
x <- 25
while(abs(g^2 - x) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
g <- 7
x <- 25
while(abs(g^2 - x) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
# From Wikipedia:
# Perhaps the first algorithm used for approximating √S is known as the Babylonian method,
# named after the Babylonians, or "Hero's method", named after the first-century Greek
# mathematician Hero of Alexandria who gave the first explicit description of the method.
g <- 7
x <- 25
while(abs(g^2 - x) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
# From Wikipedia:
# Perhaps the first algorithm used for approximating √S is known as the Babylonian method,
# named after the Babylonians, or "Hero's method", named after the first-century Greek
# mathematician Hero of Alexandria who gave the first explicit description of the method.
g <- 2
x <- 25
while(abs(g^2 - x) > 0.000001) {
print(g)
g <- (g + x/g)/2
}
g
Sys.which("git")
# Laad de benodigde package(s)
library(rvest)
# Lees ruwe html data in.
htmlpage <- read_html("http://www.pginvestor.com/Historic-Prices")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
stockDF <- tables[1][[1]]
View(stockDF)
